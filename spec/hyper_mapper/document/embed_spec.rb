require 'spec_helper'

describe 'HyperMapper::Document::Embed' do
  
  before do
    @client = stub_client
    @user = User.new username: 'goggin13', 
                     email: 'goggin13@example.com',
                     posts: [
                       {title: 'Hello world', id: 1},
                       {title: 'Goodbye world', id: 2}
                     ]
  end

  describe "embeds_many" do
    
    it "should be a method on the class" do
      User.should respond_to :embeds_many
    end
    
    it "embedded? should return false" do
      User.embedded?.should be_false
    end    

    it "should add a plural function name to the parent object" do
      @user.should respond_to :posts
    end

    it "should return the relevant posts" do
      @user.posts[0].should be_a Post
      @user.posts[1].should be_a Post
      @user.posts[0].title.should == 'Hello world'
      @user.posts[1].title.should == 'Goodbye world'
    end

    it "should be able to be added to" do
      post = Post.new id: 3, title: "test"
      @user.posts << post
      @user.posts.length.should == 3
      @user.posts.find(3).user.username.should == @user.username
    end

    it "should return the first item" do
      @user.posts.first.title.should == 'Hello world'
    end

    it "should offer a find method" do
      @user.posts.find(2).title.should == 'Goodbye world'
    end

    xit "should offer a create method" do
      @user.posts.create! id: 3, title: "test"
    end
  end

  describe "embedded_in" do
    
    before do
      @post = @user.posts[0]
    end

    it "should be a method on the class" do
      Post.should respond_to :embedded_in
    end

    it "embedded? should return true" do
      Post.embedded?.should be_true
    end
      
    it "should add a singular function name to the child object" do
      @post.should respond_to :user
    end

    it "should add a parent functionto the child object" do
      @post.should respond_to :parent
    end    

    it "should return the relevant user" do
      user = @post.user
      user.should be_a User
      user.username.should == 'goggin13'
      user.email.should == 'goggin13@example.com'
    end

    it "should return the relevant user" do
      user = @post.parent
      user.should be_a User
      user.username.should == 'goggin13'
      user.email.should == 'goggin13@example.com'
    end

    it "should persist the parent object" do
      @post.title = 'a new title'
      @user.email = 'new@example.com'
      post_json = [{title: 'a new title', id: '1'}.to_json, {title: 'Goodbye world', id: '2'}.to_json].to_json
      stub_put 'users', 'goggin13',{email: 'new@example.com', posts: post_json}
      @post.save
    end

    it "should set an autogenerated id on the child" do
       user = User.new(username: 'goggin13')
       @client.should_receive(:put) do |space, key, hash|
          space.should == 'users'
          key.should == 'goggin13'
          posts_arr = JSON.load hash[:posts]
          post = user.posts.from_json! posts_arr[0]
          post.id.length.should == 32
          post.title.should == 'test'
       end
       user.posts.create! title: 'test'
    end
  end  
end
